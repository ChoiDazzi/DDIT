package kr.or.ddit.basic.enumTest;

/*
 	📌 enum (열거형)		=> 서로 관련있는 상수들의 집합을 나타낸다.
 								=> 클래스처럼 보이게하는 상수 
 	📍 만드는 방법 			=> 열거형은 클래스처럼 독립된 java 파일에 만들 수 있고,
 									  하나의 java 파일에 클래스와 같이 만들 수 있고,
 									  클래스 안에 내부 클래스처럼 만들 수 있다. 
 	📍열거형의 속성 및 메서드 
 		✅	name()							=> 열거형 상수의 이름을 문자열로 반환한다. 
 		✅ ordinal()						=> 열거형 상수가 정의된 순서(index값)을 반환한다. (0부터 시작)
 		✅ valueOf("열거형 상수명")	=> 지정된 열거형에서 '열거형 상수명'과 일치하는 열거형 상수를 반환한다. 
 		✅ 열거형 이름.values()			=> 열거형에 선언된 모든 상수들을 배열로 묶어서 반환한다.
 		✅ 열거형 이름.상수명				=> valueOf()메서드와 결과가 같다 
 	
 	📍 열거형 선언하기 
 		✅ 방법1) 
 						enum 열거형 이름 {상수명1, 상수명2, ... }
 		✅ 방법2) 
 						c
 */

public class EnumTest {
	public enum Color { RED, GREEN, BLUE }
	public enum Count { ONE, TWO, THREE } 
	
	public static void main(String[] args) {
//		System.out.println("RED" + ConstTest.RED);
//		System.out.println("THREE" + ConstTest.THREE);
//		
//		if (ConstTest.RED == ConstTest.TWO) {
//			System.out.println("....");
//		} else {
//			System.out.println("####");
//		}
		
		Color mycol = Color.valueOf("GREEN"); // Color.GREEN 과 같다.
		Count mycnt = Count.ONE;					 // Count.valueOf("ONE") 과 같다. 
		
		System.out.println("mycol: " + mycol);
		System.out.println("mycnt: " + mycnt);
		
		System.out.println("mycol ordinal : " + mycol.ordinal());
	}
}

//하나의 java 파일에 클래스와 같이 만든 열거형 
class TestEnum2{
	
	
}